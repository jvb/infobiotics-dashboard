from infobiotics.shared.api import Params, Enum, Str, File, Long, Float

class PModelCheckerParams(Params):
    ''' Traits common to PRISMParams and MC2Params. '''
    
    _parameters_name = 'pmodelchecker'

    model_checker = Enum(['PRISM','MC2'], desc='the name of the model checker to use, PRISM or MC2')

    model_specification = File(readable=True, filter=['Lattice Population P systems (*.lpp)','All files (*)'], desc='name of the file containing the model specification as an LPP-system')
    positions = Str('all', desc="a string stating the positions of the P systems under study.\nThe format of the string is the following: 'x_1,y_1:x_2,y_2: ... :x_n,y_n'")
    molecular_species = Str('all', desc="a string stating the name of the molecular species under study.\nThe format of the string is the following: 'moleculeName_1,moleculeName_2, ...,moleculeName_n'")

    temporal_formulas = File(writable=True, desc='the name of the file containing the temporal logic formulas formalising the properties to check')
    formula_parameters = Str(desc="a string stating the values of the parameters in the formulas as follows:\n'param=lb:ub:s,param=lb:ub:s, ...' where lb is the lower bound, up is the upper bound and s is the step.\nParameters with a single value can also be specified as follows:\n'param=value,param=value, ...'")

    number_samples = Long(desc='the number of simulations to generate when taking an approximate or simulative approach to model checking')
    precision = Float(1.0, desc='the precision to achieve with respect to a real value when generating an estimate using approximate or simulative model checking')
    confidence = Float(0.1, desc='the confidence to achieve with respect to a real value when generating an estimate using approximate or simulative model checking')

    results_file = File('results.txt', desc='the name of the file to write the answers to the temporal logic formulas generated by the model checker')


if __name__ == '__main__':
    execfile('prism_params.py')
    