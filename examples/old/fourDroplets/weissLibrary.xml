<?xml version="1.0"?>
<libraryOfModules name="Weiss Library">

  <!-- Constitutive expression promoter -->
  <moduleDefinition name="Pconst">
    <setOfObjects>
      <object name="X" />
    </setOfObjects>
    <setOfConstants>
      <constant name="c_1" lowerBound="0.1" upperBound="0.1" precision="1" scale="logarithmic" />
    </setOfConstants>
    <setOfLabels>
      <label name="l" />
    </setOfLabels>
    <setOfRules>
      <!-- [ Pconst_geneX ]_b -> [ Pconst_geneX + rnaX_RNAP ]_b -->
      <rule name="r_1" module_rule="1" type ="boundary" constant="c_1">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="Pconst_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="Pconst_geneX"/>
            <object name="rnaX_RNAP"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
    </setOfRules>
  </moduleDefinition>

  <!-- Lux Promoter -->
  <moduleDefinition name="Plux">
    <setOfObjects>
      <object name="X" />
    </setOfObjects>
    <setOfConstants>
      <constant name="c_1" lowerBound="1" upperBound="1" precision="1" scale="logarithmic" />
      <constant name="c_2" lowerBound="1" upperBound="1" precision="1" scale="logarithmic" />
      <constant name="c_3" lowerBound="4" upperBound="4" precision="1" scale="logarithmic" />
    </setOfConstants>
    <setOfLabels>
      <label name="l" />
    </setOfLabels>
    <setOfRules>
      <!-- [ LuxR2 + Plux_geneX ]_b -> [ Plux_LuxR2_geneX ]_b -->
      <rule name="r_1" module_rule="1" type ="boundary" constant="c_1">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="LuxR2"/>
	    <object name="Plux_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="Plux_LuxR2_geneX"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ Plux_LuxR2_geneX ]_b -> [ LuxR2 + Plux_geneX ]_b -->
      <rule name="r_2" module_rule="1" type ="boundary" constant="c_2">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="Plux_LuxR2_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="LuxR2"/>
	    <object name="Plux_geneX"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ Plux_LuxR2_geneX ]_b -> [ Plux_LuxR2_geneX + rnaX_RNAP ]_b -->
      <rule name="r_3" module_rule="1" type ="boundary" constant="c_3">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="Plux_LuxR2_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="Plux_LuxR2_geneX"/>
 	    <object name="rnaX_RNAP"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
    </setOfRules>

  </moduleDefinition>

  <!-- Synthetic promoter combining the lux promoter and the OR1 from -->
  <!-- lambda phage -->
  <moduleDefinition name="PluxPR">
    <setOfObjects>
      <object name="X" />
    </setOfObjects>
    <setOfConstants>
      <constant name="c_1" lowerBound="1" upperBound="1" precision="1" scale="logarithmic" />
      <constant name="c_2" lowerBound="1" upperBound="1" precision="1" scale="logarithmic" />
      <constant name="c_3" lowerBound="1" upperBound="1" precision="1" scale="logarithmic" />
      <constant name="c_4" lowerBound="1" upperBound="1" precision="1" scale="logarithmic" />
      <constant name="c_5" lowerBound="5" upperBound="5" precision="1" scale="logarithmic" />
      <constant name="c_6" lowerBound="0.05" upperBound="0.05" precision="1" scale="logarithmic" />
      <constant name="c_7" lowerBound="5" upperBound="5" precision="1" scale="logarithmic" />
      <constant name="c_8" lowerBound="0.05" upperBound="0.05" precision="1" scale="logarithmic" />
      <constant name="c_9" lowerBound="4" upperBound="4" precision="1" scale="logarithmic" />
    </setOfConstants>
    <setOfLabels>
      <label name="l" />
    </setOfLabels>
    <setOfRules>
      <!-- [ LuxR2 + PluxPR_geneX ]_b -> [ PluxPR_LuxR2_geneX ]_b -->
      <rule name="r_1" module_rule="1" type ="boundary" constant="c_1">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="LuxR2"/>
	    <object name="PluxPR_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_LuxR2_geneX"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ PluxPR_LuxR2_geneX ]_b -> [ LuxR2 + PluxPR_geneX ]_b -->
      <rule name="r_2" module_rule="1" type ="boundary" constant="c_2">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_LuxR2_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_geneX"/>
	    <object name="LuxR2"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ LuxR2 + PluxPR_CI2_geneX ]_b -> [ PluxPR_LuxR2_CI2_geneX ]_b -->
      <rule name="r_3" module_rule="1" type ="boundary" constant="c_3">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="LuxR2"/>
	    <object name="PluxPR_CI2_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_LuxR2_CI2_geneX"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ PluxPR_LuxR2_CI2_geneX ]_b -> [ LuxR2 + PluxPR_CI2_geneX ]_b -->
      <rule name="r_4" module_rule="1" type ="boundary" constant="c_4">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_LuxR2_CI2_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_CI2_geneX"/>
	    <object name="LuxR2"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ CI2 + PluxPR_geneX ]_b -> [ PluxPR_CI2_geneX ]_b -->
      <rule name="r_5" module_rule="1" type ="boundary" constant="c_5">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="CI2"/>
	    <object name="PluxPR_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_CI2_geneX"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ PluxPR_CI2_geneX ]_b -> [ CI2 + PluxPR_geneX ]_b -->
      <rule name="r_6" module_rule="1" type ="boundary" constant="c_6">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_CI2_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_geneX"/>
	    <object name="CI2"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ CI2 + PluxPR_LuxR2_geneX ]_b -> [ PluxPR_LuxR2_CI2_geneX ]_b -->
      <rule name="r_7" module_rule="1" type ="boundary" constant="c_7">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="CI2"/>
	    <object name="PluxPR_LuxR2_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_LuxR2_CI2_geneX"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ PluxPR_LuxR2_CI2_geneX ]_b -> [ CI2 + PluxPR_LuxR2_geneX ]_b -->
      <rule name="r_8" module_rule="1" type ="boundary" constant="c_8">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_LuxR2_CI2_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_LuxR2_geneX"/>
	    <object name="CI2"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ PluxPR_LuxR2_geneX ]_b -> [ PluxPR_LuxR2_geneX + rnaX_RNAP ]_b -->
      <rule name="r_9" module_rule="1" type ="boundary" constant="c_9">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_LuxR2_geneX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="PluxPR_LuxR2_geneX"/>
	    <object name="rnaX_RNAP"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
    </setOfRules>
  </moduleDefinition>

  <!-- PostTranscriptional Regulation -->
  <moduleDefinition name="PostTransc">
    <setOfObjects>
      <object name="X" />
    </setOfObjects>
    <setOfConstants>
      <constant name="c_1" lowerBound="9" upperBound="9" precision="1" scale="logarithmic" />
      <constant name="c_2" lowerBound="0" upperBound="6" precision="1" scale="logarithmic" />
      <constant name="c_3" lowerBound="9" upperBound="9" precision="1" scale="logarithmic" />
      <constant name="c_4" lowerBound="-3" upperBound="6" precision="1" scale="logarithmic" />
      <constant name="c_5" lowerBound="-3" upperBound="6" precision="1" scale="logarithmic" />
    </setOfConstants>
    <setOfLabels>
      <label name="l" />
    </setOfLabels>
    <setOfRules>
      <!-- [ rnaX_RNAP ]_b -> [ rnaX ]_b -->
      <rule name="r_1" module_rule="1" type ="boundary" constant="c_1">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="rnaX_RNAP"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="rnaX"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ rnaX ]_b -> [ rnaX + proteinX_Rib ]_b -->
      <rule name="r_2" module_rule="1" type ="boundary" constant="c_2">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="rnaX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="rnaX"/>
	    <object name="proteinX_Rib"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ rnaX ]_b -> [ ]_b -->
      <rule name="r_3" module_rule="1" type ="boundary" constant="c_3">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="rnaX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ proteinX_Rib ]_b -> [ proteinX ]_b -->
      <rule name="r_4" module_rule="1" type ="boundary" constant="c_4">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="proteinX_Rib"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="proteinX"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ proteinX ]_b -> [ ]_b -->
      <rule name="r_5" module_rule="1" type ="boundary" constant="c_5">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="proteinX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
          </listOfInsideObjects>
        </rhs>
      </rule>
    </setOfRules>
  </moduleDefinition>

  <!-- Protein Dimerisation -->
  <moduleDefinition name="Dim">
    <setOfObjects>
      <object name="X" />
      <object name="Y" />
    </setOfObjects>
    <setOfConstants>
      <constant name="c_1" lowerBound="9" upperBound="9" precision="1" scale="logarithmic" />
      <constant name="c_2" lowerBound="0" upperBound="6" precision="1" scale="logarithmic" />
    </setOfConstants>
    <setOfLabels>
      <label name="l" />
    </setOfLabels>
    <setOfRules>
      <!-- [ proteinX + proteinX ]_b -> [ Y ]_b -->
      <rule name="r_1" module_rule="1" type ="boundary" constant="c_1">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="proteinX"/>
	    <object name="proteinX"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="Y"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ Y ]_b -> [ ]_b -->
      <rule name="r_2" module_rule="1" type ="boundary" constant="c_2">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="Y"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
          </listOfInsideObjects>
        </rhs>
      </rule>
    </setOfRules>
  </moduleDefinition>

  <!-- Protein Dimerisation after signal sensing -->
  <moduleDefinition name="DimSig">
    <setOfObjects>
      <object name="X" />
      <object name="S" />
      <object name="Y" />
    </setOfObjects>
    <setOfConstants>
      <constant name="c_1" lowerBound="9" upperBound="9" precision="1" scale="logarithmic" />
      <constant name="c_2" lowerBound="0" upperBound="6" precision="1" scale="logarithmic" />
      <constant name="c_3" lowerBound="9" upperBound="9" precision="1" scale="logarithmic" />
      <constant name="c_4" lowerBound="-3" upperBound="6" precision="1" scale="logarithmic" />
    </setOfConstants>
    <setOfLabels>
      <label name="l" />
    </setOfLabels>
    <setOfRules>
      <!-- [ proteinX + signalS ]_b -> [ proteinX_S ]_b -->
      <rule name="r_1" module_rule="1" type ="boundary" constant="c_1">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
	    <object name="proteinX"/>
	    <object name="signalS"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="proteinX_S"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ proteinX_S ]_b -> [ ]_b -->
      <rule name="r_2" module_rule="1" type ="boundary" constant="c_2">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="proteinX_S"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ proteinX_S + proteinX_S ]_b -> [ Y ]_b -->
      <rule name="r_3" module_rule="1" type ="boundary" constant="c_3">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="proteinX_S"/>
            <object name="proteinX_S"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="Y"/>
          </listOfInsideObjects>
        </rhs>
      </rule>
      <!-- [ Y ]_b -> [ ]_b -->
      <rule name="r_4" module_rule="1" type ="boundary" constant="c_4">
        <lhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
            <object name="Y"/>
          </listOfInsideObjects>
        </lhs>
        <rhs>
          <listOfOutsideObjects>
          </listOfOutsideObjects>
          <listOfInsideObjects label="l">
          </listOfInsideObjects>
        </rhs>
      </rule>
    </setOfRules>
  </moduleDefinition>

  <!-- Passive Diffusion of a signal molecule -->
  <moduleDefinition name="Diffusion">
    <setOfObjects>
      <object name="X" />
    </setOfObjects>
    <setOfConstants>
      <constant name="c_1" />
    </setOfConstants>
    <setOfLabels>
      <label name="l" />
    </setOfLabels>
    <setOfRules>
      <!-- [ signalX ]_b =(1,0)=[]_b -> [ ]_b =(1,0)=[ signalX ]_b -->
      <rule name="r_1" module_rule="1" type ="translocation" constant="c_1" vector="1,0">
            <lhs>
              <listOfOutsideObjects>
              </listOfOutsideObjects>
              <listOfInsideObjects label="l">
              </listOfInsideObjects>
              <listOfTranslocatedObjects label="l">
		<object name="signalX"/>
              </listOfTranslocatedObjects>
            </lhs>
            <rhs>
              <listOfOutsideObjects>
              </listOfOutsideObjects>
              <listOfInsideObjects label="l">
              </listOfInsideObjects>
              <listOfTranslocatedObjects label="l">
		<object name="signalX"/>
              </listOfTranslocatedObjects>
            </rhs>
      </rule>
      <!-- [ signalX ]_b =(-1,0)=[]_b -> [ ]_b =(-1,0)=[ signalX ]_b -->
      <rule name="r_2" module_rule="1" type ="translocation" constant="c_1" vector="-1,0">
            <lhs>
              <listOfOutsideObjects>
              </listOfOutsideObjects>
              <listOfInsideObjects label="l">
              </listOfInsideObjects>
              <listOfTranslocatedObjects label="l">
		<object name="signalX"/>
              </listOfTranslocatedObjects>
            </lhs>
            <rhs>
              <listOfOutsideObjects>
              </listOfOutsideObjects>
              <listOfInsideObjects label="l">
              </listOfInsideObjects>
              <listOfTranslocatedObjects label="l">
		<object name="signalX"/>
              </listOfTranslocatedObjects>
            </rhs>
      </rule>
      <!-- [ signalX ]_b =(0,1)=[]_b -> [ ]_b =(0,1)=[ signalX ]_b -->
      <rule name="r_3" module_rule="1" type ="translocation" constant="c_1" vector="0,1">
            <lhs>
              <listOfOutsideObjects>
              </listOfOutsideObjects>
              <listOfInsideObjects label="l">
              </listOfInsideObjects>
              <listOfTranslocatedObjects label="l">
		<object name="signalX"/>
              </listOfTranslocatedObjects>
            </lhs>
            <rhs>
              <listOfOutsideObjects>
              </listOfOutsideObjects>
              <listOfInsideObjects label="l">
              </listOfInsideObjects>
              <listOfTranslocatedObjects label="l">
		<object name="signalX"/>
              </listOfTranslocatedObjects>
            </rhs>
      </rule>
      <!-- [ signalX ]_b =(0,-1)=[]_b -> [ ]_b =(0,-1)=[ signalX ]_b -->
      <rule name="r_4" module_rule="1" type ="translocation" constant="c_1" vector="0,-1">
            <lhs>
              <listOfOutsideObjects>
              </listOfOutsideObjects>
              <listOfInsideObjects label="l">
              </listOfInsideObjects>
              <listOfTranslocatedObjects label="l">
		<object name="signalX"/>
              </listOfTranslocatedObjects>
            </lhs>
            <rhs>
              <listOfOutsideObjects>
              </listOfOutsideObjects>
              <listOfInsideObjects label="l">
              </listOfInsideObjects>
              <listOfTranslocatedObjects label="l">
		<object name="signalX"/>
              </listOfTranslocatedObjects>
            </rhs>
      </rule>
    </setOfRules>
  </moduleDefinition>

  <!-- General Degradation module -->
  <moduleDefinition name="Deg">
    <setOfObjects>
      <object name="X" />
    </setOfObjects>
    <setOfConstants>
      <constant name="c_1" />
    </setOfConstants>
    <setOfLabels>
      <label name="l" />
    </setOfLabels>
    <setOfRules>
      <!-- [ X ]_b -> [ ]_b -->
      <rule name="r_1" module_rule="1" type ="boundary" constant="c_1">
            <lhs>
              <listOfOutsideObjects>
              </listOfOutsideObjects>
              <listOfInsideObjects label="l">
		<object name="X"/>
              </listOfInsideObjects>
            </lhs>
            <rhs>
              <listOfOutsideObjects>
              </listOfOutsideObjects>
              <listOfInsideObjects label="l">
              </listOfInsideObjects>
            </rhs>
      </rule>
    </setOfRules>
  </moduleDefinition>

</libraryOfModules>
